name: OAS-TO-KONG-REPO     
on:
  workflow_dispatch:
    inputs:
      api_repo_name:
        description: 'API Repository name'
        required: true
      api_repo_branch:
        description: Choose the branch name for API Repository
        required: true
      global_config_repo_name:
        description: 'Global Config Repository name'
        required: true  
      gobal_config_branch:
        description: Choose the branch name for Global Config Repository
        required: true
      environment:
        description: 'The environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prod
          - test    
env:
  AWS_REGION: eu-west-2

permissions:
  id-token: write # This is required for requesting the JWT
  contents: write  # This is required for actions/checkout

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest  
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.Ec2_Instance_Id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ID }}:role/GitHub_AWS
          aws-region: ${{ env.AWS_REGION }}

      - name: Create EC2 instance
        id: start-ec2-runner
        run: |
          instance_id=$(aws ec2 run-instances \
            --image-id ${{ secrets.GIT_RUNNER_AMI }} \
            --count 1 \
            --no-associate-public-ip-address \
            --instance-type t2.micro \
            --iam-instance-profile Name=spininstance \
            --subnet-id ${{ secrets.EC2_SUBNET }} \
            --security-group-ids ${{ secrets.EC2_SG }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=kong-on-demand-self-hosted-runner}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "Ec2_Instance_Id=$instance_id" >> $GITHUB_OUTPUT
          echo "Ec2_Instance_Id=$instance_id" >> $GITHUB_ENV
            
      - name: Wait for EC2 instance status checks
        run: |
          echo "Waiting for instance $Ec2_Instance_Id status checks..."
          aws ec2 wait instance-status-ok --instance-ids "$Ec2_Instance_Id"

      - name: Run command on EC2 instance using SSM
        run: |
          echo "Sending command to instance $Ec2_Instance_Id..."
          aws ssm send-command --instance-ids "$Ec2_Instance_Id" --document-name "AWS-RunShellScript" --parameters commands=["sudo systemctl start self-hosted"]
  
  
  OAS_TO_KONG_REPO:
    name: Publish Spec to Kong Repo
    needs: start-runner
    runs-on: self-hosted
    steps:
      - name: Checkout global config code 
        uses: actions/checkout@v2
        with:
          repository: 'UoS-IT-Services/${{ github.event.inputs.global_config_repo_name }}'
          ref: '${{ github.event.inputs.gobal_config_branch }}'
          token: ${{ secrets.INTEGRATION_GH_PAT }}
          path: global-config
      
      - name: Checkout code from API repo
        uses: actions/checkout@v2
        with:
          repository: 'UoS-IT-Services/${{ github.event.inputs.api_repo_name }}'
          ref: '${{ github.event.inputs.api_repo_branch }}'
          token: ${{ secrets.INTEGRATION_GH_PAT }}
          path: api

      - name: Find OAS file name in the directory
        run: |
          cd api/Apiconfig
          SPEC_FILE=$(ls -p | grep -v / | grep -v spectral.yaml | grep -v rulesets-kong.yaml)
          echo "SPEC_FILE=$SPEC_FILE" >> $GITHUB_ENV  

      - name: Inso Linting
        run: |
          spectral --version
          spectral lint ./api/Apiconfig/${{ env.SPEC_FILE }} --ruleset ./api/Apiconfig/.spectral.yaml

      - name: Generate Kong config from OAS
        run:  deck file openapi2kong -s api/Apiconfig/${{ env.SPEC_FILE }} -o kong.yaml

      - name: Add Global plugins
        run:  cat kong.yaml | deck file add-plugins ./global-config/${{ github.event.inputs.environment }}/global-level-plugins.yaml -o kong.yaml

      - name: Add Route plugins
        run:  cat kong.yaml | deck file add-plugins ./global-config/${{ github.event.inputs.environment }}/route-level-plugins.yaml -o kong.yaml 

      - name: Add Service plugins
        run:  cat kong.yaml | deck file add-plugins ./global-config/${{ github.event.inputs.environment }}/service-level-plugins.yaml -o kong.yaml

      - name: Validate Kong configuration file against linting ruleset
        run:  deck file lint -s kong.yaml ./api/Apiconfig/rulesets-kong.yaml    

      - name: Push artifact to Kong Repo
        run: |
          cp kong.yaml ./api/Apiconfig/Kongconfig/Kong-${{ env.SPEC_FILE }}
          cd api
          git config --local user.email "action@github.com"
          git config --local user.name "Github Action"
          git add ./Apiconfig/Kongconfig/Kong-${{ env.SPEC_FILE }}
          git commit -m "update Kong config file"
          git push origin ${{ github.event.inputs.api_repo_branch }}    
        

  Terminate_ec2_instance:
    runs-on: ubuntu-latest
    needs: [start-runner, OAS_TO_KONG_REPO]
    env:
      Ec2_Instance_Id: ${{ needs.start-runner.outputs.ec2-instance-id }}
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ID }}:role/GitHub_AWS
          aws-region: ${{ env.AWS_REGION }}

      - name: Terminate ec2 instance
        run: |
          echo "This job always runs at the end of the pipeline."
          echo "Instance_id : $Ec2_Instance_Id"
          aws ec2 terminate-instances --instance-ids $Ec2_Instance_Id
